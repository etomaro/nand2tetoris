// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   //zx
   Mux16(a=true, b=false, sel=zx, out=outa);
   And16(a=outa, b=x, out=outb);
   //nx
   Not16(in=outb, out=outc);
   Mux16(a=outb, b=outc, sel=nx, out=outd);
   //zy
   Mux16(a=true, b=false, sel=zy, out=oute);
   And16(a=oute, b=y, out=outf);
   //ny
   Not16(in=outf, out=outg);
   Mux16(a=outf, b=outg, sel=ny, out=outh);
   //f
   And16(a=outd, b=outh, out=outi);
   Add16(a=outd, b=outh, out=outj);
   Mux16(a=outi, b=outj, sel=f, out=outk);
   //no
   Not16(in=outk, out=outl);
   Mux16(a=outk, b=outl, sel=no, out=out, out[0..7]=outzr0, out[8..15]=outzr1, out[15]=outng);
   //zr(outが0かどうか)
   Or8Way(in=outzr0, out=outzr2);
   Or8Way(in=outzr1, out=outzr3);
   Or(a=outzr2, b=outzr3, out=outzr4);
   Not(in=outzr4, out=zr);
   //ng(outが負かどうか)
   And(a=outng, b=true, out=ng);
}